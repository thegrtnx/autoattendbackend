generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             String               @id @default(cuid())
  firstname          String
  lastname           String
  email              String               @unique
  phone              String               @unique
  address            String?
  city               String?
  state              String?
  country            String?
  zip                String?
  logo               String?
  website            String?
  description        String?
  referralCode       String?              @unique
  isActive           Boolean              @default(false)
  otp                String?
  otpExpiredAt       DateTime?
  TransactionHistory TransactionHistory[]
  Wallet             Wallet?
  WalletBalance      WalletBalance?
  status             Status               @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Preferences        Preferences[]
  Referral           Referral?

  @@index([userId])
  @@index([referralCode])
  @@index([isActive])
}

model Referral {
  referralId   String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  referralCode String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([referralId])
  @@index([referralCode])
  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Wallet {
  wallet_id     String   @id @default(cuid())
  accountNumber String   @unique
  bankName      String?
  dva_id        Int?
  accountName   String?
  bankId        Int?
  currency      String?
  cust_code     String?  @unique
  cust_id       Int?
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([wallet_id])
  @@index([userId])
  @@index([accountNumber])
  @@index([bankName])
  @@index([accountName])
  @@index([created_at])
  @@index([updated_at])
}

model WalletBalance {
  balanceId   String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  balance     Float    @default(0.0)
  lastBalance Float    @default(0.0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([balanceId])
  @@index([userId])
  @@index([balance])
  @@index([created_at])
  @@index([updated_at])
}

model TransactionHistory {
  transactionHistoryId String      @id @default(cuid())
  amount               Float
  paymentType          PaymentType
  prevBalance          Float
  newBalance           Float
  paymentReference     String
  extRef               String?
  currency             String?
  channel              String?
  charge               Float?
  chargeNarration      String?
  senderBank           String?
  senderAccount        String?
  recieverBank         String?
  recieverAccount      String?
  paymentDescription   String
  paid_at              DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  User                 User?       @relation(fields: [userUserId], references: [userId])
  userUserId           String?

  @@index([transactionHistoryId])
  @@index([amount])
  @@index([paymentType])
  @@index([paymentReference])
  @@index([extRef])
  @@index([currency])
  @@index([channel])
  @@index([charge])
  @@index([chargeNarration])
  @@index([senderBank])
  @@index([senderAccount])
  @@index([recieverBank])
  @@index([recieverAccount])
  @@index([paymentDescription])
  @@index([userUserId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Students {
  studentid      String          @id @default(cuid())
  firstname      String
  lastname       String
  class          String
  dob            String
  status         Status          @default(ACTIVE)
  gender         Gender
  qrId           String?         @unique
  qrUrl          String?
  qrPublicId     String?
  picture        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  StudentAddress StudentAddress?
  StudentParent  StudentParent[]

  @@index([studentid])
}

model StudentAddress {
  addressid String   @id @default(cuid())
  studentid String   @unique
  student   Students @relation(fields: [studentid], references: [studentid], onDelete: Cascade)
  address   String
  longitude Float?
  latitude  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([addressid])
  @@index([studentid])
  @@index([longitude, latitude])
}

model StudentParent {
  parentid       String     @id @default(cuid())
  studentid      String
  student        Students   @relation(fields: [studentid], references: [studentid], onDelete: Cascade)
  parentname     String
  parentphoneSMS String
  parentphoneWA  String
  parentemail    String
  parentaddress  String?
  parentrole     ParentRole
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([parentid])
  @@index([studentid])
}

model Preferences {
  preferenceid   String   @id @default(cuid())
  userid         String
  user           User     @relation(fields: [userid], references: [userId], onDelete: Cascade)
  telegram       Boolean  @default(true)
  telegramChatId String?  @unique
  whatsapp       Boolean  @default(true)
  email          Boolean  @default(true)
  sms            Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([preferenceid])
  @@index([userid])
}

enum Gender {
  MALE
  FEMALE
}

enum ParentRole {
  FATHER
  MOTHER
  GUARDIAN
}

enum PaymentType {
  DEBIT
  CREDIT
  REFUND
  COUPON
}

enum Role {
  USER
  RIDER
  SUPER_ADMIN
  ADMIN
  FINANCE
  DEVELOPER
  SUPPORT
}

enum PaymentSource {
  PAYSTACK
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum Status {
  ACTIVE
  APPROVED
  PENDING
  SUSPENDED
  ARCHIVED
  FRAUD
  REJECTED
  FULFILLED
  ACCEPTED
  KYC_1
  KYC_2
  KYC_3
}

enum AccountType {
  INDIVIDUAL
  BUSINESS
}
